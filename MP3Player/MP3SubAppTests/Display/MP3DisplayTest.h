/*
 * MP3Display.h
 *
 *  Created on: Apr 22, 2018
 *      Author: james
 */

#ifndef MP3DISPLAYTEST_H_
#define MP3DISPLAYTEST_H_

#include "tasks.hpp"
#include "LPC17xx.h"
#include <demo/lab5_SSP/SSPDriver.hpp>
#include <demo/lab2_Gpio/LabGPIO.hpp>
#include <demo/lab4_Adc_Pwm/PWMDriver.hpp>

/* PCD8544 Data/Command */

const uint8_t LCD_COMMAND = 0;
const uint8_t LCD_DATA = 1;

/* 84x48 LCD Defines */

const uint8_t LCD_WIDTH = 84; // X-coordinates go wide
const uint8_t LCD_HEIGHT = 48; // Y-coordinates go high
const uint8_t WHITE = 0; // For drawing pixels. A 0 draws white.
const uint8_t BLACK = 1; // A 1 draws black

/**
 * Font Table:
 * - Each row column contains a hex value that represent pixels
 * for a font that is 5 pixels WIDE and 8 pixels HIGH.
 * - Each byte in a row represents one, 8-pixel, vertical
 * column of a character
 * - 5 bytes per character
 *
 * Every file that includes 'MP3Display.h' will receive its own
 * independent copy of 'ascii'. This copy isn't shared between
 * two files that include 'MP3Display.h'
 */
static const uint8_t ascii[][5] = {
        // The first 32 characters are ignored [0x00 - 0x19]
        // since they're non-displayable control characters
        {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x20
        {0x00, 0x00, 0x5f, 0x00, 0x00}, // 0x21 !
        {0x00, 0x07, 0x00, 0x07, 0x00}, // 0x22 "
        {0x14, 0x7f, 0x14, 0x7f, 0x14}, // 0x23 #
        {0x24, 0x2a, 0x7f, 0x2a, 0x12}, // 0x24 $
        {0x23, 0x13, 0x08, 0x64, 0x62}, // 0x25 %
        {0x36, 0x49, 0x55, 0x22, 0x50}, // 0x26 &
        {0x00, 0x05, 0x03, 0x00, 0x00}, // 0x27 '
        {0x00, 0x1c, 0x22, 0x41, 0x00}, // 0x28 (
        {0x00, 0x41, 0x22, 0x1c, 0x00}, // 0x29 )
        {0x14, 0x08, 0x3e, 0x08, 0x14}, // 0x2a *
        {0x08, 0x08, 0x3e, 0x08, 0x08}, // 0x2b +
        {0x00, 0x50, 0x30, 0x00, 0x00}, // 0x2c ,
        {0x08, 0x08, 0x08, 0x08, 0x08}, // 0x2d -
        {0x00, 0x60, 0x60, 0x00, 0x00}, // 0x2e .
        {0x20, 0x10, 0x08, 0x04, 0x02}, // 0x2f /
        {0x3e, 0x51, 0x49, 0x45, 0x3e}, // 0x30 0
        {0x00, 0x42, 0x7f, 0x40, 0x00}, // 0x31 1
        {0x42, 0x61, 0x51, 0x49, 0x46}, // 0x32 2
        {0x21, 0x41, 0x45, 0x4b, 0x31}, // 0x33 3
        {0x18, 0x14, 0x12, 0x7f, 0x10}, // 0x34 4
        {0x27, 0x45, 0x45, 0x45, 0x39}, // 0x35 5
        {0x3c, 0x4a, 0x49, 0x49, 0x30}, // 0x36 6
        {0x01, 0x71, 0x09, 0x05, 0x03}, // 0x37 7
        {0x36, 0x49, 0x49, 0x49, 0x36}, // 0x38 8
        {0x06, 0x49, 0x49, 0x29, 0x1e}, // 0x39 9
        {0x00, 0x36, 0x36, 0x00, 0x00}, // 0x3a :
        {0x00, 0x56, 0x36, 0x00, 0x00}, // 0x3b ;
        {0x08, 0x14, 0x22, 0x41, 0x00}, // 0x3c <
        {0x14, 0x14, 0x14, 0x14, 0x14}, // 0x3d =
        {0x00, 0x41, 0x22, 0x14, 0x08}, // 0x3e >
        {0x02, 0x01, 0x51, 0x09, 0x06}, // 0x3f ?
        {0x32, 0x49, 0x79, 0x41, 0x3e}, // 0x40 @
        {0x7e, 0x11, 0x11, 0x11, 0x7e}, // 0x41 A
        {0x7f, 0x49, 0x49, 0x49, 0x36}, // 0x42 B
        {0x3e, 0x41, 0x41, 0x41, 0x22}, // 0x43 C
        {0x7f, 0x41, 0x41, 0x22, 0x1c}, // 0x44 D
        {0x7f, 0x49, 0x49, 0x49, 0x41}, // 0x45 E
        {0x7f, 0x09, 0x09, 0x09, 0x01}, // 0x46 F
        {0x3e, 0x41, 0x49, 0x49, 0x7a}, // 0x47 G
        {0x7f, 0x08, 0x08, 0x08, 0x7f}, // 0x48 H
        {0x00, 0x41, 0x7f, 0x41, 0x00}, // 0x49 I
        {0x20, 0x40, 0x41, 0x3f, 0x01}, // 0x4a J
        {0x7f, 0x08, 0x14, 0x22, 0x41}, // 0x4b K
        {0x7f, 0x40, 0x40, 0x40, 0x40}, // 0x4c L
        {0x7f, 0x02, 0x0c, 0x02, 0x7f}, // 0x4d M
        {0x7f, 0x04, 0x08, 0x10, 0x7f}, // 0x4e N
        {0x3e, 0x41, 0x41, 0x41, 0x3e}, // 0x4f O
        {0x7f, 0x09, 0x09, 0x09, 0x06}, // 0x50 P
        {0x3e, 0x41, 0x51, 0x21, 0x5e}, // 0x51 Q
        {0x7f, 0x09, 0x19, 0x29, 0x46}, // 0x52 R
        {0x46, 0x49, 0x49, 0x49, 0x31}, // 0x53 S
        {0x01, 0x01, 0x7f, 0x01, 0x01}, // 0x54 T
        {0x3f, 0x40, 0x40, 0x40, 0x3f}, // 0x55 U
        {0x1f, 0x20, 0x40, 0x20, 0x1f}, // 0x56 V
        {0x3f, 0x40, 0x38, 0x40, 0x3f}, // 0x57 W
        {0x63, 0x14, 0x08, 0x14, 0x63}, // 0x58 X
        {0x07, 0x08, 0x70, 0x08, 0x07}, // 0x59 Y
        {0x61, 0x51, 0x49, 0x45, 0x43}, // 0x5a Z
        {0x00, 0x7f, 0x41, 0x41, 0x00}, // 0x5b [
        {0x02, 0x04, 0x08, 0x10, 0x20}, // 0x5c \ (keep this to escape the backslash)
        {0x00, 0x41, 0x41, 0x7f, 0x00}, // 0x5d ]
        {0x04, 0x02, 0x01, 0x02, 0x04}, // 0x5e ^
        {0x40, 0x40, 0x40, 0x40, 0x40}, // 0x5f _
        {0x00, 0x01, 0x02, 0x04, 0x00}, // 0x60 `
        {0x20, 0x54, 0x54, 0x54, 0x78}, // 0x61 a
        {0x7f, 0x48, 0x44, 0x44, 0x38}, // 0x62 b
        {0x38, 0x44, 0x44, 0x44, 0x20}, // 0x63 c
        {0x38, 0x44, 0x44, 0x48, 0x7f}, // 0x64 d
        {0x38, 0x54, 0x54, 0x54, 0x18}, // 0x65 e
        {0x08, 0x7e, 0x09, 0x01, 0x02}, // 0x66 f
        {0x0c, 0x52, 0x52, 0x52, 0x3e}, // 0x67 g
        {0x7f, 0x08, 0x04, 0x04, 0x78}, // 0x68 h
        {0x00, 0x44, 0x7d, 0x40, 0x00}, // 0x69 i
        {0x20, 0x40, 0x44, 0x3d, 0x00}, // 0x6a j
        {0x7f, 0x10, 0x28, 0x44, 0x00}, // 0x6b k
        {0x00, 0x41, 0x7f, 0x40, 0x00}, // 0x6c l
        {0x7c, 0x04, 0x18, 0x04, 0x78}, // 0x6d m
        {0x7c, 0x08, 0x04, 0x04, 0x78}, // 0x6e n
        {0x38, 0x44, 0x44, 0x44, 0x38}, // 0x6f o
        {0x7c, 0x14, 0x14, 0x14, 0x08}, // 0x70 p
        {0x08, 0x14, 0x14, 0x18, 0x7c}, // 0x71 q
        {0x7c, 0x08, 0x04, 0x04, 0x08}, // 0x72 r
        {0x48, 0x54, 0x54, 0x54, 0x20}, // 0x73 s
        {0x04, 0x3f, 0x44, 0x40, 0x20}, // 0x74 t
        {0x3c, 0x40, 0x40, 0x20, 0x7c}, // 0x75 u
        {0x1c, 0x20, 0x40, 0x20, 0x1c}, // 0x76 v
        {0x3c, 0x40, 0x30, 0x40, 0x3c}, // 0x77 w
        {0x44, 0x28, 0x10, 0x28, 0x44}, // 0x78 x
        {0x0c, 0x50, 0x50, 0x50, 0x3c}, // 0x79 y
        {0x44, 0x64, 0x54, 0x4c, 0x44}, // 0x7a z
        {0x00, 0x08, 0x36, 0x41, 0x00}, // 0x7b {
        {0x00, 0x00, 0x7f, 0x00, 0x00}, // 0x7c |
        {0x00, 0x41, 0x36, 0x08, 0x00}, // 0x7d }
        {0x10, 0x08, 0x08, 0x10, 0x08}, // 0x7e ~
        {0x78, 0x46, 0x41, 0x46, 0x78} // 0x7f DEL
};

/**
 * displayMap stores a buffer of pixels on our display
 * - there are 504 total bytes in this array, same as how
 * many pixels are on a 84 x 48 display
 *
 * - a byte covers a 8-pixel vertical block on the display
 *
 * - every following byte covers next 8-pixel column over until
 * you reach right-edge of display and step down 8 rows
 *
 * - we update the display by writing to this array, then calling
 * updateDisplay() function, which sends this whole array to the PCD8544
 *
 * - we use this array to make changes to the display since
 * the PCD8544 doesn't allow us to write individual pixels at a time
 *
 * Every file that includes 'MP3Display.h' will receive its own
 * independent copy of 'ascii'. This copy isn't shared between
 * two files that include 'MP3Display.h'
 */
static uint8_t displayMap[LCD_WIDTH * LCD_HEIGHT / 8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,0)->(11,7) ~ These 12 bytes cover an 8x12 block in the left corner of the display
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,0)->(23,7)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, // (24,0)->(35,7)
        0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0x1E, 0x0E, 0x02, 0x00, // (36,0)->(47,7)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (48,0)->(59,7)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,0)->(71,7)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,0)->(83,7)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,8)->(11,15)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,8)->(23,15)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // (24,8)->(35,15)
        0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, // (36,8)->(47,15)
        0xF8, 0xF0, 0xF8, 0xFE, 0xFE, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, // (48,8)->(59,15)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,8)->(71,15)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,8)->(83,15)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,16)->(11,23)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,16)->(23,23)
        0x00, 0x00, 0xF8, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xF3, 0xE0, 0xE0, 0xC0, // (24,16)->(35,23)
        0xC0, 0xC0, 0xE0, 0xE0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // (36,16)->(47,23)
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x00, 0x00, 0x00, // (48,16)->(59,23)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,16)->(71,23)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,16)->(83,23)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,24)->(11,31)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,24)->(23,31)
        0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // (24,24)->(35,31)
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // (36,24)->(47,31)
        0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, // (48,24)->(59,31)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,24)->(71,31)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,24)->(83,31)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,32)->(11,39)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,32)->(23,39)
        0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, // (24,32)->(35,39)
        0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, // (36,32)->(47,39)
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (48,32)->(59,39)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,32)->(71,39)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,32)->(83,39)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,40)->(11,47)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,40)->(23,47)
        0x00, 0x00, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, // (24,40)->(35,47)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (36,40)->(47,47)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (48,40)->(59,47)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,40)->(71,47)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,40)->(83,47) !!! The bottom right pixel!
};

/**
 * There are two memory banks in the LCD:
 * - data/RAM
 * - commands
 */

/**
 * Send command byte to LCD Display
 * Reference: Leveraged PCD8544 Datasheet Figure 10, Pg 12
 */
void sendCommand(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t *cmd);


/**
 * Send command bytes to LCD Display
 * Reference: Leveraged PCD8544 Datasheet Figure 11
 */
void sendCommandBytes(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t *cmd, uint8_t size);


/**
 * Send data byte to LCD Display
 * Reference: Leveraged PCD8544 Datasheet Figure 10
 */
void sendData(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t *data);

/**
 * Send data bytes to LCD Display
 * Reference: Leveraged PCD8544 Datasheet Figure 11
 */
void sendDataBytes(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t *data, uint8_t size);


/**
 * Performs hardware RESET on LCD Display
 * Reference: Leveraged PCD8544 Datasheet Figure 13
 */
void hardReset(LabGPIO *sce, LabGPIO *rst);

/**
 * Instruction Set:
 * When H = 0 or H = 1,
 * - NOP
 * - Function Set
 * - Write Data
 *      When H = 0:
 *      - Reserved
 *      - Display Control
 *      - Reserved
 *      - Set Y address of RAM
 *      - Set X address of RAM
 *      When H = 1:
 *      - Reserved
 *      - Temperature Control
 *      - Reserved
 *      - Bias System
 *      - Reserved
 *      - Set Vop
 */

/**
 * nop() - performs no operation
 * DC set Low, Command Byte = 00000000
 */
void nop(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc);

/*
 * functionSet() - performs power down control; entry mode;
 * extended instruction set control (H)
 * @param function_specified
 * - Takes in command byte: 0 0 1 0 0 PD V H
 */
void functionSet(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t function_specified);

/**
 * From Table 1:
 * displayControl() - sets the display configuration
 * @param display_configuration
 * - Takes in command byte: 0 0 0 0 1 D 0 E
 * To See different display Configurations, check Table 2:
 * Change D and E to configure display:
 * 00 = display blank
 * 10 = normal mode
 * 01 = all display segments on
 * 11 = inverse video mode
 */
void displayControl(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t display_configuration);

/**
 * In Table 1:
 * setYAddressRam() - sets Y-address of RAM; 0 <= Y <= 5
 * @param set_y_address
 * - Takes in command byte: 0 1 0 0 0 Y2 Y1 Y0
 */
void setYAddressRam(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t set_y_address);

/**
 * In Table 1:
 * setXAddressRam() - sets X-address of RAM; 0 <= X <= 83
 * @param set_x_address
 * - Takes in command byte: 1 X6 X5 X4 X3 X2 X1 X0
 */
void setXAddressRam(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t set_x_address);

/**
 * In Table 1:
 * controlTemperature() - set Temperature Coefficient (TCx)
 * @param set_temp_coeff
 * - Takes in command byte: 0 0 0 0 0 1 TC1 TC0
 * To See different display Configurations, check Table 2:
 * Change TC1 and TC0 to configure display:
 * 00 = V_LCD temperature coefficient 0
 * 01 = V_LCD temperature coefficient 1
 * 10 = V_LCD temperature coefficient 2
 * 11 = V_LCD temperature coefficient 3
 */
void controlTemperature(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t set_temp_coeff);

/**
 * setBiasSystem() - set Bias System (BSx)
 * @param set_bias_system
 * - Takes in command byte: 0 0 0 1 0 BS2 BS1 BS0
 */
void setBiasSystem(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t set_bias_system);

/**
 * setVop() - write Vop to register
 * @param write_vop_to_reg
 * - Takes in command byte: 1 Vop6 Vop5 Vop4 Vop3 Vop2 Vop1 Vop0
 */
void setVop(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t write_vop_to_reg);

/**
 * setContrast() - set LCD Vop to a value between 0 and 127
 * 40-60 is usually a good range
 * Leverages setVop() function
 */
void setContrast(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t contrast);

/**
 * jumpToXY() - directly commands LCD to jump to a specific X, Y coordinate
 */
void jumpToXY(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t x, uint8_t y);

/**
 * clearDisplay() - clears the entire display either white (0) or black (1)
 */
void clearDisplay(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, bool black_white);

/**
 * setPixel() - sets a pixel on displayMap to preferred color:
 * black = 1, white = 0
 */
void setPixel(uint8_t x, uint8_t y, bool black_white);

/**
 * writeCharacter() - Write character (defined in multi-dimensional array ASCII table)
 * to the display at a defined X and Y coordinate
 */
void writeCharacter(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t x, uint8_t y, char character, bool black_white);

/**
 * writeString() - draws a string of characters using writeCharacter()
 * with progressive coordinates until it's done.
 * const char *C_String - is a pointer to const char data types, so the pointer can't modify the value at that variable,
 * but the pointer itself can be modified
 */
void writeString(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, uint8_t x, uint8_t y, const char *C_String, bool black_white);

/**
 * Initialize LCD Display:
 *
 * 8.2 Reset Function
 * What is the state after reset? Found in Section 8.2
 * The LCD Driver has the following state:

 * Power-down mode (bit PD=1)
 * Horizontal Addressing (bit V = 0)
 * Normal Instruction set (bit H = 0)
 * Display blank (bit E = D = 0)
 * Address counter X6 to X0 = 0; Y2 to Y0 = 0
 * Temperature control mode (TC1 TC0 = 0)
 * Bias System (BS2 to BS0 = 0)
 * Vlcd is equal to 0, the HV generator is switched off (Vop6 to Vop0 = 0)
 * After power-on, the RAM contents are undefined, which means you may see random dots
 */
void initDisplay(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, LabGPIO *rst, PWMDriver *light);

/**
 * Displays some characters (P, H, etc) on the screen
 * and performs inverse video mode
 */
void play_simple_lcd_demo(SSPDriver *ssp, LabGPIO *sce, LabGPIO *dc, PWMDriver *light);

/**
 * test LCD display for character output
 */
void testDisplay(void *params);

/* runs LCD Display Text Application*/
void runDisplay(void);

#endif /* MP3DISPLAYTEST_H_ */
